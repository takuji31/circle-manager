// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Member {
  id                String              @id @db.VarChar(255)
  pathname          String              @default(cuid()) @db.VarChar(255)
  circleRole        CircleRole          @default(Member)
  name              String              @db.VarChar(255)
  trainerId         String?             @db.VarChar(255)
  messageChannelId  String?             @db.VarChar(255)
  setupCompleted    Boolean             @default(false)
  status            MemberStatus        @default(Joined)
  joinedAt          DateTime
  leavedAt          DateTime?
  circleKey         CircleKey?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  monthCircles      MonthCircle[]
  signUp            SignUp?
  monthSurveyAnswer MonthSurveyAnswer[]
  PersonalChannel   PersonalChannel[]
  fanCounts UmastagramMemberFanCount[]

  ScreenShot ScreenShot[]
  @@unique([pathname])
  @@index([leavedAt])
  @@index([joinedAt])
  @@index([circleKey, circleRole, joinedAt])
}

enum CircleRole {
  Leader
  SubLeader
  Member
}

/// メンバーの指定した月の在籍サークル
model MonthCircle {
  id               String           @id @default(cuid())
  memberId         String           @db.VarChar(255)
  member           Member           @relation(fields: [memberId], references: [id])
  year             Int
  month            Int
  currentCircleKey CircleKey?
  state            MonthCircleState
  kicked           Boolean          @default(false)
  invited          Boolean          @default(false)
  joined           Boolean          @default(false)
  /// ランキングによって上書きされないよう設定されているか
  locked           Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([year, month, memberId])
  @@index([memberId])
  @@index([year, month, state])
  @@index([kicked, invited, joined, memberId])
  @@index([locked])
}

/// 在籍希望アンケート
model MonthSurvey {
  id        String   @id @db.VarChar(255) /// アンケートのメッセージID
  year      Int
  month     Int
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([year, month])
}

/// 在籍希望アンケートの回答
model MonthSurveyAnswer {
  id        String                  @id @default(uuid()) @db.VarChar(255)
  year      Int
  month     Int
  memberId  String                  @db.VarChar(255)
  member    Member                  @relation(fields: [memberId], references: [id])
  circleKey CircleKey
  value     MonthSurveyAnswerValue? @default(None)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  @@unique([year, month, memberId])
  @@index([memberId])
  @@index([value, memberId])
}

enum MonthSurveyAnswerValue {
  None
  Saikyo
  Umamusume
  Leave
  Ob
}

/// 加入申請
model SignUp {
  id        String     @id @db.VarChar(255) /// DiscordのユーザーID
  member    Member     @relation(fields: [id], references: [id])
  circleKey CircleKey?
  invited   Boolean    @default(false)
  joined    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([joined])
}

/// Umastagramから取得した各メンバーのファン数
model UmastagramMemberFanCount {
  id        String    @id @default(cuid()) @db.VarChar(255)
  date      DateTime  @db.Date
  circle    CircleKey
  name      String    @db.VarChar(255)
  total     BigInt
  avg       BigInt
  predicted BigInt
  memberId  String?   @db.VarChar(255)
  member    Member?   @relation(fields: [memberId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([date, circle])
  @@index([memberId, date])
}

/// Umastagramから取得したサークルごとのファン数
model UmastagramCircleFanCount {
  id           String    @id @default(cuid()) @db.VarChar(255)
  date         DateTime  @db.Date
  circle       CircleKey
  total        BigInt
  avg          BigInt
  predicted    BigInt
  predictedAvg BigInt
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([circle, date])
  @@index([date])
}

/// 個人チャンネル
model PersonalChannel {
  id        String   @id @db.VarChar(255)
  channelId String   @db.VarChar(255)
  member    Member   @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, channelId])
}

/// ファン数記録用のスクリーンショット
model ScreenShot {
  id            String                        @id @default(cuid()) @db.VarChar(255)
  circleKey     CircleKey
  date          DateTime                      @db.Date // 対象の日付
  url           String? /// 画像のURL、アップロードが完了していない時はnull
  uploaderId    String                        @db.VarChar(255)
  uploader      Member                        @relation(fields: [uploaderId], references: [id]) /// アップロードを実行したメンバー
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  parseResult   ScreenShotParseResult?
  resultMembers ScreenShotParseResultMember[]
}

/// スクリーンショットをCloud Vision APIにぶん投げて解析した結果
model ScreenShotParseResult {
  id            String                        @id
  rawJson       Json
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  screenShot    ScreenShot                    @relation(fields: [id], references: [id], onDelete: Cascade)
  resultMembers ScreenShotParseResultMember[]
}

/// スクリーンショットから抽出されたメンバー
model ScreenShotParseResultMember {
  id           String                @id @default(cuid())
  screenShotId String
  order        Int
  name         String?
  role         CircleRole
  count        BigInt
  result       ScreenShotParseResult @relation(fields: [screenShotId], references: [id], map: "ScreenShotParseResultMember_screenShotId_fkey_result", onDelete: Cascade)
  screenShot   ScreenShot            @relation(fields: [screenShotId], references: [id], onDelete: Cascade)

  @@index([screenShotId])
}

// for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// end for NextAuth

// enum

enum CircleKey {
  Saikyo
  Shin
  Ha
  Jo
}

enum MemberStatus {
  NotJoined
  Joined
  Leaved
  OB
  Kicked
}

enum MonthCircleState {
  Saikyo
  Shin
  Ha
  Jo
  Leaved
  OB
  Kicked
}

// end enum
