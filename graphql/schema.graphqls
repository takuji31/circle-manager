### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Circle {
  id: ID!
  members: [Member!]!
  name: String!
  order: Int!
  selectableByAdmin: Boolean!
  selectableByUser: Boolean!
  selectableInSurvey: Boolean!
}

enum CircleFilter {
  All
  CircleSelect
  MonthSurvey
}

enum CircleRole {
  Leader
  Member
  SubLeader
}

type CreateNextMonthSurveyPayload {
  nextMonth: Month!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Member {
  circle: Circle
  circleRole: CircleRole!
  id: ID!
  joinedAt: DateTime!
  leavedAt: DateTime
  name: String!
  nextMonthCircle: MonthCircle
  pathname: String!
  setupCompleted: Boolean!
  signUp: SignUp
  thisMonthCircle: MonthCircle
  trainerId: String
}

type Month {
  month: String!
  survey: MonthSurvey
  year: String!
}

type MonthCircle {
  circle: Circle
  currentCircle: Circle!
  id: ID!
  invited: Boolean!
  joined: Boolean!
  kicked: Boolean!
  member: Member!
  month: String!
  year: String!
}

"""在籍希望アンケート"""
type MonthSurvey {
  answers: [MonthCircle!]!
  expiredAt: DateTime!

  """アンケートのメッセージID"""
  id: ID!
  month: String!
  noAnswerMembers: [Member!]!
  year: String!
}

type Mutation {
  createNextMonthSurvey: CreateNextMonthSurveyPayload
  updateMember(input: UpdateMemberMutationInput!): Member!
  updateMemberMonthCircle(circleId: String!, memberId: String!, month: String!, year: String!): UpdateMemberMonthCirclePayload
  updateMembers: [Member!]!
  updateMonthCircle(data: UpdateMonthCircleMutationInput!): UpdateMemberMonthCirclePayload
  updateSignUp(input: UpdateSignUpMutationInput!): SignUp!
}

type Query {
  circles(filter: CircleFilter = All): [Circle!]!
  member(id: String, pathname: String): Member
  members: [Member!]!
  monthCircle(monthCircleId: String!): MonthCircle
  monthSurvey(month: String!, year: String!): MonthSurvey
  nextMonth: Month!
  signUps: [SignUp!]!
  siteMetadata: SiteMetadata!
  thisMonth: Month!
}

"""加入申請"""
type SignUp {
  circle: Circle!

  """DiscordのユーザーID"""
  id: ID!
  invited: Boolean!
  joined: Boolean!
  member: Member!
}

type SiteMetadata {
  activeMembers: Int!
  maxMembers: Int!
  totalMembers: Int!
}

type UpdateMemberMonthCirclePayload {
  monthCircle: MonthCircle!
}

input UpdateMemberMutationInput {
  id: String!
  name: String = null
  setupCompleted: Boolean = null
  trainerId: String = null
}

input UpdateMonthCircleMutationInput {
  id: String!
  invited: Boolean = null
  joined: Boolean = null
  kicked: Boolean = null
}

input UpdateSignUpMutationInput {
  circleId: String = null
  invited: Boolean = null
  joined: Boolean = null
  memberId: String!
}
