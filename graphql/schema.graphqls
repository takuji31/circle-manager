### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""circle"""
type Circle {
  id: ID!
  key: CircleKey!
  name: String!
}

enum CircleFilter {
  All
  CircleSelect
  MonthSurvey
}

enum CircleKey {
  Ha
  Jo
  Saikyo
  Shin
}

enum CircleRole {
  Leader
  Member
  SubLeader
}

type CreateMonthCirclesPayload {
  month: Int!
  monthCircles: [MonthCircle!]!
  year: Int!
}

type CreateNextMonthSurveyPayload {
  nextMonth: Month!
}

"""ISO8601 Date string"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Member {
  circle: Circle
  circleKey: CircleKey
  circleRole: CircleRole!
  id: ID!
  joinedAt: DateTime!
  leavedAt: DateTime
  messageChannelId: String
  name: String!
  nextMonthCircle: MonthCircle

  """次の月の在籍希望アンケート回答"""
  nextMonthSurveyAnswer: MonthSurveyAnswer
  pathname: String!
  setupCompleted: Boolean!
  signUp: SignUp
  status: MemberStatus!
  thisMonthCircle: MonthCircle
  trainerId: String
}

"""Umastagramから取得した各メンバーのファン数"""
type MemberFanCount {
  avg: BigInt!
  circle: CircleKey!
  id: ID!
  member: Member
  name: String!
  predicted: BigInt!
  total: BigInt!
}

enum MemberStatus {
  Joined
  Kicked
  Leaved
  NotJoined
  OB
}

type Month {
  month: Int!
  monthCircles: [MonthCircle!]!
  survey: MonthSurvey
  year: Int!
}

"""メンバーの指定した月の在籍サークル"""
type MonthCircle {
  circle: Circle
  currentCircle: Circle
  currentCircleKey: CircleKey
  id: ID!
  invited: Boolean!
  joined: Boolean!
  kicked: Boolean!

  """ランキングによって上書きされないよう設定されているか"""
  locked: Boolean!
  member: Member!
  month: Int!
  state: MonthCircleState!
  year: Int!
}

enum MonthCircleState {
  Ha
  Jo
  Kicked
  Leaved
  OB
  Saikyo
  Shin
}

"""在籍希望アンケート"""
type MonthSurvey {
  answers: [MonthCircle!]!
  expiredAt: DateTime!

  """アンケートのメッセージID"""
  id: ID!
  kick: [MonthCircle!]!
  leave: [MonthCircle!]!
  month: String!
  monthSurveyAnswers: [MonthSurveyAnswer!]!
  move: [MonthCircle!]!
  noAnswerMembers: [Member!]!
  year: String!
}

"""在籍希望アンケートの回答"""
type MonthSurveyAnswer {
  circleKey: CircleKey!
  id: ID!
  member: Member!
  month: String!
  value: MonthSurveyAnswerValue
  year: String!
}

enum MonthSurveyAnswerValue {
  Leave
  None
  Ob
  Saikyo
  Umamusume
}

type Mutation {
  createNextMonthCircles: CreateMonthCirclesPayload!
  createNextMonthSurvey: CreateNextMonthSurveyPayload
  updateMember(input: UpdateMemberMutationInput!): Member!
  updateMemberMonthCircle(circleId: String!, memberId: String!, month: Int!, year: Int!): UpdateMemberMonthCirclePayload
  updateMembers: [Member!]!
  updateMonthCircle(data: UpdateMonthCircleMutationInput!): UpdateMemberMonthCirclePayload
  updateSignUp(input: UpdateSignUpMutationInput!): SignUp!
}

type Query {
  circles(filter: CircleFilter = All): [Circle!]!
  member(id: String, pathname: String): Member
  members: [Member!]!
  monthCircle(monthCircleId: String!): MonthCircle
  monthSurvey(month: String!, year: String!): MonthSurvey
  nextMonth: Month!
  signUps: [SignUp!]!
  siteMetadata: SiteMetadata!
  thisMonth: Month!
}

"""特定の日または月のファン数ランキング"""
type Ranking {
  date: Date!
  fanCounts: [MemberFanCount!]!
}

"""加入申請"""
type SignUp {
  circle: Circle
  circleKey: CircleKey

  """DiscordのユーザーID"""
  id: ID!
  invited: Boolean!
  joined: Boolean!
  member: Member!
}

type SiteMetadata {
  activeMembers: Int!
  maxMembers: Int!
  totalMembers: Int!
}

type UpdateMemberMonthCirclePayload {
  monthCircle: MonthCircle!
}

input UpdateMemberMutationInput {
  id: String!
  name: String = null
  setupCompleted: Boolean = null
  trainerId: String = null
}

input UpdateMonthCircleMutationInput {
  id: String!
  invited: Boolean = null
  joined: Boolean = null
  kicked: Boolean = null
}

input UpdateSignUpMutationInput {
  circleKey: CircleKey = null
  invited: Boolean = null
  joined: Boolean = null
  memberId: String!
}
