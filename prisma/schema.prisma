// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Circle {
  id                  String        @id @db.VarChar(255)
  name                String
  createdAt           DateTime      @default(now())
  emoji               String?
  members             Member[]
  monthCircles        MonthCircle[]
  currentMonthCircles MonthCircle[] @relation("currentCircle")
}

model Member {
  id           String        @id @db.VarChar(255)
  pathname     String        @default(cuid()) @db.VarChar(255)
  circleRole   CircleRole    @default(Member)
  name         String        @db.VarChar(255)
  trainerId    String?       @db.VarChar(255)
  joinedAt     DateTime
  leavedAt     DateTime?
  circleId     String?       @db.VarChar(255)
  circle       Circle?       @relation(fields: [circleId], references: [id])
  monthCircles MonthCircle[]

  @@unique([pathname])
  @@index([leavedAt])
  @@index([joinedAt])
  @@index([circleId, circleRole, joinedAt])
}

enum CircleRole {
  Leader
  SubLeader
  Member
}

model MonthCircle {
  id              String                 @id @default(cuid())
  memberId        String                 @db.VarChar(255)
  member          Member                 @relation(fields: [memberId], references: [id])
  year            String                 @db.Char(4)
  month           String                 @db.Char(2)
  state           MonthCircleAnswerState @default(NoAnswer)
  circleId        String?                @db.VarChar(255)
  circle          Circle?                @relation(fields: [circleId], references: [id])
  currentCircleId String?                @db.VarChar(255)
  currentCircle   Circle?                @relation(fields: [currentCircleId], references: [id], name: "currentCircle")
  kicked          Boolean                @default(false)
  invited         Boolean                @default(false)
  joined          Boolean                @default(false)

  @@unique([year, month, memberId])
  @@index([memberId])
  @@index([year, month, circleId])
  @@index([kicked, invited, joined, memberId])
}

enum MonthCircleAnswerState {
  NoAnswer
  Answered
  Retired
}

/// 在籍希望アンケート
model MonthSurvey {
  id        String   @id @db.VarChar(255) /// アンケートのメッセージID
  year      String   @db.VarChar(4)
  month     String   @db.VarChar(2)
  expiredAt DateTime

  @@unique([year, month])
}

// for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// end for NextAuth
