// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Circle {
  id                 String  @id @db.VarChar(255)
  name               String
  emoji              String?
  order              Int     @default(0)
  selectableByUser   Boolean @default(true)
  selectableByAdmin  Boolean @default(true)
  selectableInSurvey Boolean @default(true)

  @@index([order])
  @@index([selectableByAdmin, order])
  @@index([selectableByUser, order])
  @@index([selectableInSurvey, order])
}

model Member {
  id               String           @id @db.VarChar(255)
  pathname         String           @default(cuid()) @db.VarChar(255)
  circleRole       CircleRole       @default(Member)
  name             String           @db.VarChar(255)
  trainerId        String?          @db.VarChar(255)
  messageChannelId String?          @db.VarChar(255)
  setupCompleted   Boolean          @default(false)
  status           MemberStatus     @default(Joined)
  joinedAt         DateTime
  leavedAt         DateTime?
  circleKey        CircleKey?       @default(dbgenerated("NULL"))
  monthCircles     MonthCircle[]
  signUp           SignUp?
  fanCounts        MemberFanCount[]

  MonthSurveyAnswer MonthSurveyAnswer[]
  @@unique([pathname])
  @@index([leavedAt])
  @@index([joinedAt])
  @@index([circleKey, circleRole, joinedAt])
}

enum CircleRole {
  Leader
  SubLeader
  Member
}

/// メンバーの指定した月の在籍サークル
model MonthCircle {
  id               String           @id @default(cuid())
  memberId         String           @db.VarChar(255)
  member           Member           @relation(fields: [memberId], references: [id])
  year             String           @db.Char(4)
  month            String           @db.Char(2)
  currentCircleKey CircleKey?
  state            MonthCircleState
  kicked           Boolean          @default(false)
  invited          Boolean          @default(false)
  joined           Boolean          @default(false)

  @@unique([year, month, memberId])
  @@index([memberId])
  @@index([year, month, state])
  @@index([kicked, invited, joined, memberId])
}

/// 在籍希望アンケート
model MonthSurvey {
  id        String   @id @db.VarChar(255) /// アンケートのメッセージID
  year      String   @db.VarChar(4)
  month     String   @db.VarChar(2)
  expiredAt DateTime

  @@unique([year, month])
}

/// 在籍希望アンケートの回答
model MonthSurveyAnswer {
  id        String                  @id @default(uuid()) @db.VarChar(255)
  year      String                  @db.Char(4)
  month     String                  @db.Char(2)
  memberId  String                  @db.VarChar(255)
  member    Member                  @relation(fields: [memberId], references: [id])
  circleKey CircleKey
  value     MonthSurveyAnswerValue? @default(None)

  @@unique([year, month, memberId])
  @@index([memberId])
  @@index([value, memberId])
}

enum MonthSurveyAnswerValue {
  None
  Saikyo
  Umamusume
  Leave
  Ob
}

/// 加入申請
model SignUp {
  id        String     @id @db.VarChar(255) /// DiscordのユーザーID
  member    Member     @relation(fields: [id], references: [id])
  circleKey CircleKey?
  invited   Boolean    @default(false)
  joined    Boolean    @default(false)
  createdAt DateTime   @default(now())

  @@index([joined])
}

/// Umastagramから取得した各メンバーのファン数
model MemberFanCount {
  id        String    @id @default(cuid()) @db.VarChar(255)
  date      DateTime  @db.Date
  circle    CircleKey
  name      String    @db.VarChar(255)
  total     BigInt
  avg       BigInt
  predicted BigInt
  memberId  String?   @db.VarChar(255)
  member    Member?   @relation(fields: [memberId], references: [id])

  @@index([date, circle])
  @@index([memberId, date])
}

/// Umastagramから取得したサークルごとのファン数
model CircleFanCount {
  id           String    @id @default(cuid()) @db.VarChar(255)
  date         DateTime  @db.Date
  circle       CircleKey
  total        BigInt
  avg          BigInt
  predicted    BigInt
  predictedAvg BigInt

  @@unique([circle, date])
  @@index([date])
}

// for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// end for NextAuth

// enum

enum CircleKey {
  Saikyo
  Shin
  Ha
  Jo
}

enum MemberStatus {
  NotJoined
  Joined
  Leaved
  OB
  Kicked
}

enum MonthCircleState {
  Saikyo
  Shin
  Ha
  Jo
  Leaved
  OB
  Kicked
}

// end enum
